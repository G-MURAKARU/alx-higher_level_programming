===========================
How to use 3-say_my_name.py
===========================

This module defines a function ``say_my_name(first_name: str, second_name: str = "")`` that has two string parameters:
one required, first_name, and one optional, second_name, which defaults to an empty string.

    >>> say_my_name = __import__("3-say_my_name").say_my_name

Usage
=====
The function ``say_my_name(...)`` prints the string:
"My name is <first_name> <second_name>"

::

    >>> say_my_name("Gicheru", "Murakaru")
    My name is Gicheru Murakaru

The second_name argument need not be provided since it is optional.

::

    >>> say_my_name("Messi")
    My name is Messi 

Therefore, at least one and at most two arguments are passed into the function, otherwise it will fail.

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'


    >>> say_my_name("Bruno", "Miguel", "Borges", "Fernandes")
    Traceback (most recent call last):
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 4 were given

Invalid Names
=============

Both input parameters must be strings, otherwise a TypeError is raised.

::

    >>> say_my_name(6)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(None, "Ronaldinho")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Cristiano", ["Ronaldo", "dos Santos", "Aveiro"])
    Traceback (most recent call last):
    TypeError: second_name must be a string
